// <auto-generated />
using System;
using LicenseManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LicenseManager.Infrastructure.Migrations
{
    [DbContext(typeof(LicenseManagerDbContext))]
    partial class LicenseManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LicenseManager.Domain.Assignments.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastInvokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.HasIndex("UserId");

                    b.ToTable("LicenseAssignments");
                });

            modelBuilder.Entity("LicenseManager.Domain.Licenses.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Department")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaymentValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("LicenseManager.Domain.Licenses.LicenseReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("LicenseId", "UserId")
                        .IsUnique();

                    b.ToTable("LicenseReservations", (string)null);
                });

            modelBuilder.Entity("LicenseManager.Domain.Licenses.LicenseTerms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRenewable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId")
                        .IsUnique();

                    b.ToTable("LicenseTerms");
                });

            modelBuilder.Entity("LicenseManager.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LicenseManager.Domain.Assignments.Assignment", b =>
                {
                    b.HasOne("LicenseManager.Domain.Licenses.License", "License")
                        .WithMany("Assignments")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LicenseManager.Domain.Users.User", "User")
                        .WithMany("LicenseAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LicenseManager.Domain.Licenses.LicenseReservation", b =>
                {
                    b.HasOne("LicenseManager.Domain.Licenses.License", "License")
                        .WithMany("Reservations")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LicenseManager.Domain.Users.User", "User")
                        .WithMany("LicenseReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LicenseManager.Domain.Licenses.LicenseTerms", b =>
                {
                    b.HasOne("LicenseManager.Domain.Licenses.License", "License")
                        .WithOne("Terms")
                        .HasForeignKey("LicenseManager.Domain.Licenses.LicenseTerms", "LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");
                });

            modelBuilder.Entity("LicenseManager.Domain.Licenses.License", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Reservations");

                    b.Navigation("Terms")
                        .IsRequired();
                });

            modelBuilder.Entity("LicenseManager.Domain.Users.User", b =>
                {
                    b.Navigation("LicenseAssignments");

                    b.Navigation("LicenseReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
